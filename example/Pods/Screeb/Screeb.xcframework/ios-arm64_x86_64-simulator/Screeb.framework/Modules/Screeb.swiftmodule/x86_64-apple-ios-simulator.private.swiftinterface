// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Screeb
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import StoreKit
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import os.log
import os
@_hasMissingDesignatedInitializers public class Screeb {
  public static let shared: Screeb
  public static func initSdk(context: UIKit.UIViewController?, channelId: Swift.String, identity: Swift.String? = nil, visitorProperty: [Swift.String : AnyEncodable?] = [:], initOptions: InitOptions = InitOptions())
  public static func closeSdk()
  public static func setIdentity(uniqueVisitorId: Swift.String, visitorProperties: [Swift.String : AnyEncodable?] = [:])
  public static func resetIdentity()
  public static func visitorProperty(visitorProperties: [Swift.String : AnyEncodable?])
  public static func assignGroup(type: Swift.String?, name: Swift.String, properties: [Swift.String : AnyEncodable?] = [:])
  public static func unassignGroup(type: Swift.String?, name: Swift.String, properties: [Swift.String : AnyEncodable?] = [:])
  public static func trackEvent(name: Swift.String, trackingEventProperties: [Swift.String : AnyEncodable?] = [:])
  public static func trackScreen(name: Swift.String, trackingEventProperties: [Swift.String : AnyEncodable?] = [:])
  public static func startSurvey(surveyId: Swift.String, allowMultipleResponses: Swift.Bool = true, hiddenFields: [Swift.String : AnyEncodable?] = [:], ignoreSurveyStatus: Swift.Bool = true)
  public static func debug()
  public static func debugTargeting()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ClientRepository {
  public static let shared: ClientRepository
  @objc deinit
}
public struct InitOptions {
  public init(automaticScreenDetection: Swift.Bool? = nil)
}
public struct AnyEncodable : Swift.Encodable {
  public init<T>(_ wrapped: T) where T : Swift.Encodable
  public func encode(to encoder: any Swift.Encoder) throws
}
